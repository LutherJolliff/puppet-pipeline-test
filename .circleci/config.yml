version: 2
references:
  set_environment_variables: &set_environment_variables
    run:
      name: Set Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> ${BASH_ENV}
        echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> ${BASH_ENV}
        echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}' >> ${BASH_ENV}
        echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export ROK8S_INSTALL_PATH=${HOME}' >> ${BASH_ENV}
        echo 'export KUBECONFIG_DATA=${KUBECONFIG_DATA}' >> ${BASH_ENV}
  deploy_steps: &deploy_steps
    docker:
      - image: quay.io/reactiveops/ci-images:v8-alpine
    steps:
      - checkout
      - *set_environment_variables
      - run: prepare-kubectl
      - run: k8s-deploy-and-verify -f ${ROK8S_CONFIG}

jobs:
  all_tests:
    docker:
      - image: luther007/cynerge_images:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Lint
          command: ~/node_modules/.bin/ng lint
      - run:
          name: Unit Test
          command: npm test

  imagebuild:
    docker:
      - image: quay.io/reactiveops/ci-images:v8-alpine
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-pull -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-build -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-push -f ${ROK8S_CONFIG}"
    environment:
      ROK8S_CONFIG: deploy/feature.config
  deploy_feature:
    <<: *deploy_steps
    environment:
      ROK8S_CONFIG: deploy/feature.config
      # KUBECONFIG_DATA: KUBECONFIG_DATA_DEVELOPMENT
  deploy_staging:
    <<: *deploy_steps
    environment:
      ROK8S_CONFIG: deploy/staging.config
      # KUBECONFIG_DATA: KUBECONFIG_DATA_STAGING
  deploy_production:
    <<: *deploy_steps
    environment:
      ROK8S_CONFIG: deploy/production.config
      # KUBECONFIG_DATA: KUBECONFIG_DATA_PRODUCTION

workflows:
  version: 2
  build_default:
    jobs:
    - all_tests:
        filters:
          tags:
            ignore: /.*/
    - imagebuild:
        requires:
          - all_tests
        # context: org-global
        filters:
          tags:
            ignore: /.*/
    - deploy_feature:
        # context: org-global
        requires:
          - imagebuild
        filters:
          branches:
            only:
              - feature
          tags:
            ignore: /.*/
    - deploy_staging:
        # context: org-global
        requires:
          - imagebuild
        filters:
          branches:
            only:
              - master
          tags:
            ignore: /.*/
    - deploy_production:
        # context: org-global
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /\d+\.\d+\.\d+$/


# version: 2.1

# orbs:
#   aws-eks: circleci/aws-eks@0.1.0
#   kubernetes: circleci/kubernetes@0.3.0
# references:
#   set_environment_variables: &set_environment_variables
#     run:
#       name: Set Environment Variables
#       command: |
#         echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
#         echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
#         echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
#         echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
#         echo 'export ROK8S_INSTALL_PATH=${HOME}' >> ${BASH_ENV}
#         echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> ${BASH_ENV}
#         echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> ${BASH_ENV}
#         echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}' >> ${BASH_ENV}
#         echo 'export KUBECONFIG_DATA=${KUBECONFIG_DATA}' >> ${BASH_ENV}
#         echo 'export KUBECONFIG_FILE_PATH=${KUBECONFIG_FILE_PATH}' >> ${BASH_ENV}
#   build_image: &build_image
#     run:
#       name: Build Docker Image
#       command: |
#         docker login -u="${docker_user}" -p="${docker_pass}"
#         docker-pull -f deploy/production.config
#         docker-build -f deploy/production.config
#         docker-push -f deploy/production.config


#   prepare: &prepare
#     run:
#       name: Prepare kubectl and aws cli
#       command: |
#         prepare-kubectl
#         prepare-awscli

# jobs:
#   all_tests:
#     docker:
#       - image: luther007/cynerge_images:latest
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "package.json" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-
#       - run:
#           name: Install Dependencies
#           command: npm install
#       - save_cache:
#           paths:
#             - node_modules
#           key: v1-dependencies-{{ checksum "package.json" }}
#       - run:
#           name: Lint
#           command: ng lint
#       - run:
#           name: Unit Test
#           command: npm test

#   build_image:
#     docker:
#       - image: quay.io/reactiveops/ci-images:v8.0-stretch
#     steps:
#       - checkout
#       - setup_remote_docker
#       - *set_environment_variables
#       - *build_image
#   create-deployment:
#     docker:
#       - image: quay.io/reactiveops/ci-images:v8.0-stretch
#     parameters:
#       cluster-name:
#         description: |
#           Name of the cluster
#         type: string
#     steps:
#       - checkout
#       - *set_environment_variables
#       - *prepare
#       - run:
#           name: Environment Variables
#           command: printenv
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: cynerge-cluster-6
#           install-kubectl: false
#           verbose: true
#       - kubernetes/create-or-update-resource:
#           get-rollout-status: true
#           resource-file-path: deploy/minimal-production.deployment.yml
#           resource-name: deployment/minimal-production
# workflows:
#   build-and-deploy:
#     jobs:
#       - build_image
#       - create-deployment:
#           requires:
#             - build_image
#           cluster-name: cynerge-cluster-6
#       - aws-eks/update-container-image:
#           cluster-name: cynerge-cluster-6
#           container-image-updates: 'minimal-production=luther007/rok8s-test:master'
#           record: true
#           requires:
#             - create-deployment
#           resource-name: deployment/minimal-production