version: 2.1

orbs:
  snyk: snyk/snyk@0.0.7

references:
  set_environment_variables: &set_environment_variables
    run:
      name: Set Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> ${BASH_ENV}
        echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> ${BASH_ENV}
        echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}' >> ${BASH_ENV}
        # echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export CI_TAG=${CI_TAG}' >> ${BASH_ENV}
        echo 'export ROK8S_INSTALL_PATH=${HOME}' >> ${BASH_ENV}
        # echo 'export KUBECONFIG_DATA=${KUBECONFIG_DATA}' >> ${BASH_ENV}
        echo 'export ROK8S_HELM_ADOPT_EXISTING=${ROK8S_HELM_ADOPT_EXISTING}' >> ${BASH_ENV}
        
  deploy_steps: &deploy_steps
    docker:
      - image: quay.io/reactiveops/ci-images:v8-alpine
    steps:
      - checkout
      - *set_environment_variables
      - run: aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name cynerge
      # - run: prepare-kubectl
      - run: prepare-awscli
      - run: helm init --client-only
      - run: helm repo add cynerge https://raw.githubusercontent.com/cynerge-consulting/cynerge_images/master/repo/
      - run: helm-deploy -f ${ROK8S_CONFIG}

  restore_deps: &restore_deps
    restore_cache:
      keys:
        - v1-dependencies-{{ checksum "package.json" }}
        - v1-dependencies-

  restore_git: &restore_git
    restore_cache:
      keys:
        - v1-cynerge-repo-{{ .Environment.CIRCLE_SHA1 }}
        - v1-cynerge-repo-
jobs:
  checkout-code:
    docker:
      - image: luther007/cynerge_images:latest
    steps:
      - checkout
      - save_cache:
          paths:
            - ./
          key: v1-cynerge-repo-{{ .Environment.CIRCLE_SHA1 }}

  install-deps:
      docker:
      - image: luther007/cynerge_images:latest
      steps:
        - <<: *restore_git
        - <<: *restore_deps
        - run:
            name: Install Dependencies
            command: npm install
        - save_cache:
            paths:
              - node_modules
            key: v1-dependencies-{{ checksum "package.json" }}
  unit_test:
    docker:
      - image: luther007/cynerge_images:latest
    steps:
      - <<: *restore_git
      - <<: *restore_deps
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Unit Test
          command: npm test
  pa11y_test:
    docker:
      - image: luther007/cynerge_images:latest
    steps:
      - <<: *restore_git
      - <<: *restore_deps
      - run:
          name: Test Pa11y
          command: pa11y-ci
  snyk_test:
    docker:
      - image: luther007/cynerge_images:latest
    steps:
      - <<: *restore_git
      - <<: *restore_deps
      - snyk/scan

  imagebuild:
    docker:
      - image: quay.io/reactiveops/ci-images:v8-alpine
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - run: docker login -u="${docker_user}" -p="${docker_pass}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-pull -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-build -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-push -f ${ROK8S_CONFIG}"
    environment:
      ROK8S_CONFIG: deploy/feature.config
  deploy_feature:
    <<: *deploy_steps
    environment:
      ROK8S_CONFIG: deploy/feature.config
      # KUBECONFIG_DATA: KUBECONFIG_DATA_DEVELOPMENT
  deploy_staging:
    <<: *deploy_steps
    environment:
      ROK8S_CONFIG: deploy/staging.config
      # KUBECONFIG_DATA: KUBECONFIG_DATA_STAGING
  deploy_production:
    <<: *deploy_steps
    environment:
      ROK8S_CONFIG: deploy/production.config
      # KUBECONFIG_DATA: KUBECONFIG_DATA_PRODUCTION

workflows:
  build_default:
    jobs:
      - checkout-code
      - install-deps:
          requires:
            - checkout-code
      - unit_test:
          requires:
            - install-deps
      - pa11y_test:
          requires:
            - install-deps
      - imagebuild:
          requires:
            - unit_test
          # context: org-global
          filters:
            tags:
              ignore: /.*/
      - deploy_feature:
          # context: org-global
          requires:
            - imagebuild
          filters:
            branches:
              only:
                - feature
            tags:
              ignore: /.*/
      - deploy_staging:
          # context: org-global
          requires:
            - imagebuild
          filters:
            branches:
              only:
                - staging
            tags:
              ignore: /.*/
      - deploy_production:
          # context: org-global
          filters:
            branches:
              only:
                - production
            tags:
              ignore: /.*/